
import { runUpdatedMigration } from "./updateMigration";
import { runCompleteMigration, checkDataIntegrity } from "./runMigration";

async function main() {
  console.log("üöÄ Iniciando migra√ß√£o completa do sistema...");

  try {
    // 1. Executar migra√ß√£o atualizada das tabelas
    console.log("\nüìã Etapa 1: Atualizando estrutura das tabelas...");
    await runUpdatedMigration();

    // 2. Executar migra√ß√£o de dados (seed)
    console.log("\nüå± Etapa 2: Inserindo dados iniciais...");
    const result = await runCompleteMigration();

    if (result.success) {
      console.log("\nüìä Estat√≠sticas finais:");
      console.log(`- Usu√°rios: ${result.stats.users}`);
      console.log(`- Projetos: ${result.stats.projects}`);
      console.log(`- Servi√ßos: ${result.stats.services}`);
      console.log(`- Depoimentos: ${result.stats.testimonials}`);
      console.log(`- Configura√ß√µes: ${result.stats.settings}`);

      // 3. Verificar integridade dos dados
      console.log("\nüîç Etapa 3: Verificando integridade dos dados...");
      const integrity = await checkDataIntegrity();

      if (integrity.success) {
        console.log("\nüéâ Migra√ß√£o completa executada com sucesso!");
        console.log("‚úÖ Todas as tabelas foram criadas e populadas corretamente.");
      } else {
        console.log("\n‚ö†Ô∏è Migra√ß√£o conclu√≠da, mas foram encontrados problemas de integridade:");
        integrity.checks.forEach(check => {
          const status = check.passed ? "‚úÖ" : "‚ùå";
          console.log(`   ${status} ${check.check}: ${check.value}`);
        });
      }
    }

    return { success: true };

  } catch (error) {
    console.error("‚ùå Erro durante a migra√ß√£o completa:", error);
    process.exit(1);
  }
}

// Executar se chamado diretamente
if (require.main === module) {
  main().catch(console.error);
}

export { main as runFullMigration };
